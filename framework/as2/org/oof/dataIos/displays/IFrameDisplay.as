/*
This file is part of Oof - see http://projects.silexlabs.org/?/oof

Oof is Â© 2010-2011 Silex Labs and is released under the GPL License:

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License (GPL) as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. 

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

To read the license please visit http://www.gnu.org/copyleft/gpl.html
*/
// Ariel : the source file as taken from netthreads, and moved into our class structure
// derive and contain!
// -----------------------------------------------------------------------
// IFrame.as - Alistair Rutherford, www.netthreads.co.uk
// Glasgow, Scotland Oct 2007 .
// -----------------------------------------------------------------------
// Revision  Date      Notes
// --------  ----      -----
// 1.0       16/09/07  .Initial version
// 1.1       29/09/07  .Fixed bug where the frame wasn't resizing itself
//                      when the source url was assigned.
// -----------------------------------------------------------------------
// This component is based on the work of:
// 
// Christophe Conraets 
// www.coenraets.org
//
// and
//
// Brian Deitte
// http://www.deitte.com/archives/2006/08/finally_updated.htm
//
// -----------------------------------------------------------------------
// I have made some additions to the original code
//
// - javascript support functions are now generated by the component and
// inserted directly into the DOM.
//
// - Component generates it's own div and iframe element and inserts them
// into the DOM.
//
// - When the component is created the display list is traversed from the 
// component down to the root element. At each traversal a test is made to 
// see if current component is a container. If it is a container then the 
// child of the element which leads back to the component is determined and 
// a note madeof the appropriate 'index' on the path. The index is stored 
// against a reference to the Container in a Dictionary. Also the container
// is 'seeded' with an event handler so that if the container triggers an
// IndexChangedEvent.CHANGE (i.e. when you click on a tab in a viewstack)
// the path of 'index' values down to the component can be checked. If the
// path indicates that the indexes 'line up' to expose the component then
// the view is made visible. I hope I have explained this correctly :)
// -----------------------------------------------------------------------


import flash.geom.Point;


import flash.external.ExternalInterface;

import org.oof.dataIos.Display;
/** This is an experimental iframe player. It allows you to include iframes in your flash application. 
 * 
* @author Ariel Sommeria-klein
 * */
class org.oof.dataIos.displays.IFrameDisplay extends Display{
	private var __source: String;
	private var frameId:String;
	private var iframeId:String;

	private var containerDict:Object = null;
	private var settingDict:Object = null;
	
	private var mustLoadPage:Boolean = false;
	/**
	* Here we define javascript functions which will be inserted into the DOM
	* 
	*/
	private static var FUNCTION_CREATEIFRAME:String = 
		"document.insertScript = function ()" +
		"{ " +
			"if (document.createIFrame==null)" + 
			"{" + 
				"createIFrame = function (frameID)" +
				"{ " +
					"var bodyID = document.getElementsByTagName(\"body\")[0];" +
					"var newDiv = document.createElement('div');" +
					"newDiv.id = frameID;" +
					"newDiv.style.position ='absolute';" +
					"newDiv.style.backgroundColor = 'transparent';" + 
					"newDiv.style.border = '0px';" +
					"newDiv.style.visibility = 'hidden';" +
					"bodyID.appendChild(newDiv);" +
				"}" +
			"}" +
		"}";
	
	private static var FUNCTION_MOVEIFRAME:String = 
		"document.insertScript = function ()" +
		"{ " +
			"if (document.moveIFrame==null)" +
			"{" +
				"moveIFrame = function(frameID, iframeID, x,y,w,h) " + 
				"{" +
					"var frameRef=document.getElementById(frameID);" +
					"frameRef.style.left=x;" + 
					"frameRef.style.top=y;" +
					"var iFrameRef=document.getElementById(iframeID);" +
					"iFrameRef.width=w;" +
					"iFrameRef.height=h;" +
				"}" +
			"}" +
		"}";

	private static var FUNCTION_HIDEIFRAME:String = 
		"document.insertScript = function ()" +
		"{ " +
			"if (document.hideIFrame==null)" +
			"{" +
				"hideIFrame = function (frameID)" +
				"{" +
					"document.getElementById(frameID).style.visibility='hidden';" +
				"}" +
			"}" +
		"}";

	private static var FUNCTION_SHOWIFRAME:String = 
		"document.insertScript = function ()" +
		"{ " +
			"if (document.showIFrame==null)" +
			"{" +
				"showIFrame = function (frameID)" +
				"{" +
					"document.getElementById(frameID).style.visibility='visible';" +
				"}" +
			"}" +
		"}";

	private static var FUNCTION_LOADIFRAME:String = 
		"document.insertScript = function ()" +
		"{ " +
			"if (document.loadIFrame==null)" +
			"{" +
				"loadIFrame = function (frameID, iframeID, url)" +
				"{" +
					"document.getElementById(frameID).innerHTML = \"<iframe id='\"+iframeID+\"' src='\"+url+\"' frameborder='0'></iframe>\";" +
				"}" +
			"}" +
		"}";
	
	
	private static var FUNCTION_DESTROYIFRAME:String =
		"document.insertScript = function ()" +
		"{ " +
			"if (document.destroyIFrame==null)" +
			"{" +
				"destroyIFrame = function (frameID)" +
				"{" +
					"var bodyID = document.getElementsByTagName(\"body\")[0];" +
					"var x = document.getElementById(frameID);" +
					"bodyID.removeChild(x);" + 
				"}" +
			"}" +
		"}";
	
		 
	/**
	* Constructor
	* 
	*/
	public function IFrameDisplay()
	{
		super();
		if (! ExternalInterface.available)
		{
			throw new Error("ExternalInterface is not available in this container. Internet Explorer ActiveX, Firefox, Mozilla 1.7.5 and greater, or other browsers that support NPRuntime are required.");
		}

		// Generate unique id's for frame div name
		frameId = _name;
		iframeId = "iframe_"+frameId;
		
		// Add functions to DOM if they aren't already there
		ExternalInterface.call(FUNCTION_CREATEIFRAME);
		ExternalInterface.call(FUNCTION_MOVEIFRAME);
		ExternalInterface.call(FUNCTION_HIDEIFRAME);
		ExternalInterface.call(FUNCTION_SHOWIFRAME);
		ExternalInterface.call(FUNCTION_LOADIFRAME);
		ExternalInterface.call(FUNCTION_DESTROYIFRAME);

		// Insert frame into DOM using our precreated function 'createIFrame'
		ExternalInterface.call("createIFrame", frameId);
		
		//initial state is visible. so call showIframe to match initial state
		ExternalInterface.call("showIFrame", frameId);
	}
	
	private function loadMediaFile(url:String){
		super.loadMediaFile(url);
		source = url;
		moveIFrame();

	}

	/**
	* Adjust frame position to match the exposed area in the application.
	* 
	*/
	public function moveIFrame(): Void
	{

		var point:Point = new Point(0, 0);
		this.localToGlobal(point);
		ExternalInterface.call("moveIFrame", frameId, iframeId, point.x, point.y, this.width, this.height);
	}
	
	/**
	* Set source url
	* 
	* @param url Frame contents
	* 
	*/
	public function set source(source: String): Void
	{
		if ((source) && (source != __source))
		{
			__source = source;
			ExternalInterface.call("loadIFrame", frameId, iframeId, source);
		}
	}

	/**
	* Return url of frame contents
	* 
	*/
	public function get source(): String
	{
		return __source;
	}
	
	/**
	* Sets visibility of html iframe. Rtn calls inserted javascript functions.
	* 
	* @param visible Boolean flag
	* 
	*/
	 public function set visible(visible: Boolean): Void
	{
		super.visible=visible;

		if (visible)
		{
			ExternalInterface.call("showIFrame", frameId);
		}
		else 
		{
			ExternalInterface.call("hideIFrame", frameId);
		}
		
	}
	
	public function close():Void{
		ExternalInterface.call("destroyIFrame", frameId);
	}
                
	

}