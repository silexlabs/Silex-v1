/*This file is part of Silex - see http://projects.silexlabs.org/?/silexSilex is © 2010-2011 Silex Labs and is released under the GPL License:This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License (GPL) as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.To read the license please visit http://www.gnu.org/copyleft/gpl.html*/import org.silex.ui.tools.RegionTool;/*** This class draws and handles a Knob. It is used by the RegionTool class.*/class org.silex.ui.tools.RegionToolKnob {	/**	* The MovieClip in which the Knob is drawn.	*/	public var draw_mc : MovieClip;	/**	* Our parent MovieClip, in which we add draw_mc.	*/	private var parentmc : MovieClip;		/**	* The function to be called when the user stops moving the Knob.	*/	public var onMoveEnd : Function;	/**	* The function to be called when the user starts moving the Knob.	*/	public var onMoveStart : Function;		/**	* Field for fillColor property.	*/	private var _fillColor : Number;	/**	* Field for fillAlpha property.	*/	private var _fillAlpha : Number;	/**	* Field for strokeColor property.	*/	private var _strokeColor : Number;	/**	* Field for strokeAlpha property.	*/	private var _strokeAlpha : Number;		/**	* Field for width property.	*/	private var _width : Number = 10;	/**	* Field for height property.	*/	private var _height : Number = 10;	/**	* Field for center property.	*/	private var _center : Boolean = true;		/**	* If set to true, Knob is drawn centered around origin.	*/	public function set center(value : Boolean) : Void	{		_center = value;		draw();	}		public function get center() : Boolean	{		return _center;	}		/**	* Knob's Width	*/	public function set width(value : Number) : Void	{		_width = value;		draw();	}		public function get width() : Number	{		return _width;	}		/**	* Knob's Height.	*/	public function set height(value : Number) : Void	{		_height = value;		draw();	}		public function get height() : Number	{		return _height;	}		/**	* Knob's "background" color.	*/	public function set fillColor(value : Number) : Void	{		_fillColor = value;		draw();	}		public function get fillColor() : Number	{		return _fillColor;	}		/**	* Knob's "background color" alpha component (0 = transparent, 100 = opaque).	*/	public function set fillAlpha(value : Number) : Void	{		_fillAlpha = value;		draw();	}		public function get fillAlpha() : Number	{		return _fillAlpha;	}		/**	* Knob's stroke color.	*/	public function set strokeColor(value : Number) : Void	{		_strokeColor = value;		draw();	}		public function get strokeColor() : Number	{		return _strokeColor;	}		/**	* Knob's stroke color alpha component (0 = transparent, 100 = opaque).	*/	public function set strokeAlpha(value : Number) : Void	{		_strokeAlpha = value;		draw();	}		public function get strokeAlpha() : Number	{		return _strokeAlpha;	}		/**	* Field for x property.	*/	private var _x : Number;	/**	* Knob's horizontal position.	*/	public function set x(value : Number) : Void	{		draw_mc._x = value;	}	public function get x() : Number	{		return draw_mc._x;	}	/**	* Field for y property.	*/	public var _y : Number;	/**	* Knob's vertical position.	*/	public function set y(value : Number) : Void	{		draw_mc._y = value;	}	public function get y() : Number	{		return draw_mc._y;	}	/**	* Constructor. Initializes draw_mc and gets default color values from RegionTool. Also sets event handlers.	*/	function RegionToolKnob(parentmc : MovieClip)	{		this.parentmc = parentmc;		draw_mc = parentmc.createEmptyMovieClip("", parentmc.getNextHighestDepth());				//Default color		fillColor = RegionTool.knobFillColor;		fillAlpha = RegionTool.knobFillAlpha;		strokeColor = RegionTool.knobStrokeColor;		strokeAlpha = RegionTool.knobStrokeAlpha;				//Draw		draw();		draw_mc.onPress = org.silex.core.Utils.createDelegate(this, handleStartDrag);		draw_mc.onRelease = org.silex.core.Utils.createDelegate(this, handleStopDrag);	}	/**	* Draws the Handler	*/	private function draw()	{		var xOffset : Number = 0;		var yOffset : Number = 0;		if(_center)		{			xOffset = - _width /2;			yOffset = - _height /2;		}		draw_mc.clear();		draw_mc.beginFill(fillColor, fillAlpha);		draw_mc.lineStyle(1, strokeColor, strokeAlpha);		draw_mc.moveTo(0 + xOffset,0 + yOffset);		draw_mc.lineTo(_width + xOffset, 0 + yOffset);		draw_mc.lineTo(_width + xOffset, _height + yOffset);		draw_mc.lineTo(0 + xOffset, _height + yOffset);		draw_mc.lineTo(0 + xOffset, 0 + yOffset);		draw_mc.endFill();	}		/**	* Called when the user begins dragging the Knob.	*/	public function handleStartDrag()	{		this.draw_mc.startDrag(false);		//Call event handler if set.		if(this.onMoveStart != null)			this.onMoveStart(this);	}	/**	* Called when the user stops dragging the Knob.	*/	public function handleStopDrag()	{		this.draw_mc.stopDrag();		//Call event handler if set.		if(this.onMoveEnd != null)			this.onMoveEnd(this);	}		/**	* Call when you don't need the Knob anymore. Frees up delegates and removes MovieClip.	*/	public function destruct()	{		//Free delegates		org.silex.core.Utils.removeDelegate(this, handleStartDrag);		org.silex.core.Utils.removeDelegate(this, handleStopDrag);				this.draw_mc.removeMovieClip();	}}