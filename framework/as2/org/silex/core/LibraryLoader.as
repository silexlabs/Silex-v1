/*This file is part of Silex - see http://projects.silexlabs.org/?/silex

Silex is Â© 2010-2011 Silex Labs and is released under the GPL License:

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License (GPL) as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. 

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

To read the license please visit http://www.gnu.org/copyleft/gpl.html
*/
import org.silex.adminApi.util.T;import org.silex.core.Sequencer;import org.silex.core.Utils;import org.silex.util.EventDispatcherBase;[Event("libraryLoadDone")]/** * loads library clips. Use for fonts, and for making sure a resource is available in the navigator cache before showing the publication * @author Ariel Sommeria-klein  * */class org.silex.core.LibraryLoader extends EventDispatcherBase{	public static var EVENT_LIBRARY_LOAD_DONE = "libraryLoadDone";	/**	 * array of file names which will be preloaded, i.e. loaded before SILEX starts to load the 1st page of the website.	 */	private var _urlsLeftToLoad:Array;	/**	 * MovieClipLoader for the preloaded files.	 */	private var _movieClipLoader:MovieClipLoader;	/**	 * Container for the preloaded files. Each file is loaded into this clip, is run for one frame and then the next is loaded there too. At the end it is destroyed.	 */	private var _targetClip:MovieClip;		/**	 * sequencer, used for timing.	 * */	private var _sequencer:Sequencer; 		public function LibraryLoader(urls:Array, sequencer:Sequencer){		//T.y("LibraryLoader", urls);		_urlsLeftToLoad = urls;		_sequencer = sequencer;	}		public function start(){		if(_targetClip){			trace("LibraryLoader already started. Ignoring");			return;		}				_targetClip = _root.createEmptyMovieClip("LibraryLoaderTargetClip",_root.getNextHighestDepth());				// listener for mcl		var listener:Object=new Object;		listener.onLoadInit=Utils.createDelegate(this,loadFileSuccess);		listener.onLoadError=Utils.createDelegate(this,loadFileError);				// init _movieClipLoader 		_movieClipLoader=new MovieClipLoader;		_movieClipLoader.addListener(listener);				loadNextFile();	}		/**	 * Callback executed when a file has been successfully loaded.	 * load the next file.	 */	private function loadFileSuccess(){		//this needs to be done each time		_targetClip._visible = false;		//T.y("loadFileSuccess");		_sequencer.doInNextFrame(Utils.createDelegate(this,loadNextFile));	}	/**	 * Callback executed when a file has *not* been successfully loaded.	 * load the next file.	 */	private function loadFileError(target_mc:MovieClip, errorCode:String, httpStatus:Number) {		T.y("LibraryLoader error loading ", arguments);		_sequencer.doInNextFrame(Utils.createDelegate(this,loadNextFile));	}	/**	 * loads the next file in loadFilesList array.	 * Or call loadFilesDone if the end of the array was reached.	 */	private function loadNextFile()	{		//T.y("loadNextFile", _urlsLeftToLoad);				var nextUrl:Object = _urlsLeftToLoad.pop();		// is there a file to load?		if (nextUrl)		{			// load the file			_movieClipLoader.loadClip(String(nextUrl), _targetClip);		}		else{			// remove previous clip			_movieClipLoader.unloadClip(_targetClip);			//finished!			dispatchEvent({target:this, type:EVENT_LIBRARY_LOAD_DONE});		}	}	}