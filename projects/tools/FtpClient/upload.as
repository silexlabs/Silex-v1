// ********************************************************// 							FILE/ADD (upload)	function addUpload()	{									fileListener = new Object(); 				fileListener.onSelect = Delegate.create(this,onSelect);		fileListener.onOpen = Delegate.create(this,onOpen);		fileListener.onProgress = Delegate.create(this,onProgress);		fileListener.onCancel = Delegate.create(this,onCancel);		fileListener.onComplete = Delegate.create(this,onComplete);		fileListener.onHTTPError = Delegate.create(this,onHTTPError);		fileListener.onIOError = Delegate.create(this,onIOError);		fileListener.onSecurityError = Delegate.create(this,onSecurityError);		fileListener.onUploadCompleteData = Delegate.create(this,onUploadCompleteData);			var fileRef:FileReferenceList = new FileReferenceList();		fileRef.addListener(fileListener);		fileRef.browse();			}		var fileListener:Object; 	var currFileRefList:FileReferenceList;	var isComputing:Boolean=false;	var count:Number ;	var uploaded:Number = 0 ;		function onSelect(fileRefList:FileReferenceList) 	{		if (isComputing==true)		{			return;		}		currFileRefList=fileRefList;		this.trace("onSelect");		isComputing=true;		uploaded = 0 ;		count = fileRefList.fileList.length ;		nextUpload();	}		function nextUpload(file: FileReference)	{		if (currFileRefList.fileList.length>0)		{			uploaded ++ ;						if ( _ftpClient.uploadStatus._visible == false )			{				_ftpClient.uploadStatus._visible = true ;			}						var item: FileReference=FileReference(currFileRefList.fileList.shift());						item.addListener(fileListener);						_ftpClient.uploadStatus.filename.text = item.name ;			_ftpClient.uploadStatus.count.text = uploaded + "/" + count ;			_ftpClient.uploadStatus.progress._xscale = 1 ;						this.trace (uploadUrl+'?&folder='+getRelativePath()+"&session_id="+_root.session_id ) ;						if ( item.upload(uploadUrl+'?&folder='+escape(getRelativePath())+"&name="+escape(item.name)+"&session_id="+_root.session_id ))			{				this.trace ( "Upload should be done" ) ;			}					}		else		{						if ( _ftpClient.uploadStatus._visible == true )			{				_ftpClient.uploadStatus._visible = false ;			}						isComputing=false;			getFtpContent(".");		}	}		function onOpen(file:FileReference):Void {		this.trace("onOpen: " + file.name );	}	function onProgress(file:FileReference, bytesLoaded:Number, bytesTotal:Number):Void {		this.trace("onProgress with bytesLoaded: " + bytesLoaded + " bytesTotal: " + bytesTotal);		_ftpClient.uploadStatus.progress._xscale = 100 * bytesLoaded / bytesTotal ;	}	function onCancel(file:FileReference):Void {		this.trace("onCancel");		this.nextUpload () ;	}	function onComplete(file:FileReference):Void {		this.trace("onComplete: " + file.name );//+ " - server response: "+this.result+" , "+this.text);				_lastError="";		isComputing=true;		this.nextUpload () ;	}	function onHTTPError(file:FileReference):Void {		this.trace("onHTTPError: " + file.name);		this.nextUpload () ;	}	function onIOError(file:FileReference):Void {		this.trace("onIOError: " + file.name);		this.nextUpload () ;	}	function onSecurityError(file:FileReference, errorString:String):Void {		this.trace("onSecurityError: " + file.name + " errorString: " + errorString);		this.nextUpload () ;	}	function onUploadCompleteData(file:FileReference):Void {		this.trace("onUploadCompleteData: " + file.name);	}