import mx.styles.CSSStyleDeclaration;import mx.utils.Delegate;import mx.controls.DataGrid;import mx.controls.gridclasses.DataGridColumn;import FtpWebService;import mx.managers.PopUpManager;import mx.containers.Window;class FtpClient extends MovieClip{	var langFilesPath: String = "../../lang/" ;	var defaultLanguage:String = "en" ;	var backFolderMcName:String="backFolder"; // used in iconCellRenderer		var itemTypeField:String="item type";	var itemIconField:String="icon";	var itemNameField:String="item name";	var itemSizeField:String="item size";	var itemModifField:String="item last modification date";	var itemTypeFieldSize:Number=100;	var itemNameFieldSize:Number=300;	var itemSizeFieldSize:Number=50;	var itemModifFieldSize:Number=653-400;	var initialRelativePath:String=".";	var iconeCellRendererName:String="iconeCellRenderer";		var translation:Object ;	// UI	var upload_btn:Button;	var download_btn:Button;	var delete_btn:Button;	var rename_btn:Button;	var refresh_btn:Button;	var create_btn:Button;	var return_btn:Button;	var itemName_mc:MovieClip;	var uploadStatus:MovieClip;	var help:MovieClip;	var wait:MovieClip;	// data grid	var _dg:DataGrid;	var listener:Object;		// language dic	var lglv:LoadVars ;		// FtpWebService object	private var ftpWebService:FtpWebService;	// local connection for silex library	var _lc:LocalConnection;	// constructor	function FtpClient()	{				// Init translation tool		translation = {} ;		translation.terms = {} ;		translation.getTranslation = function ( term: String )		{			if ( this.terms[term] !=undefined )			{				return this.terms[term] ;			}						return term ;		}				_global.getTranslation = translation.getTranslation ;				// itemName_mc		return_btn._visible = itemName_mc._visible=false;		_root.resultName="";				if (_root.initialRelativePath) initialRelativePath=_root.initialRelativePath;				// buttons		upload_btn.onRelease=Delegate.create(this,doUpload);		download_btn.onRelease=Delegate.create(this,doDownload);		delete_btn.onRelease=Delegate.create(this,doDelete);		rename_btn.onRelease=Delegate.create(this,doRename);		refresh_btn.onRelease=Delegate.create(this,doRefresh);		create_btn.onRelease=Delegate.create(this,doCreate);		return_btn.onRelease=Delegate.create(this,doReturnToParent);				var lg:String = defaultLanguage ;				if ( _root.language != undefined )		{			lg = _root.language ;		}				lglv = new LoadVars ();				if ( _root.langFilesPath != undefined )		{			langFilesPath = _root.langFilesPath ;		}				lglv.load(langFilesPath + lg + ".txt");		lglv.onLoad = Delegate.create(this,onLoadTRanslationFile) ;				_lc=new LocalConnection;	}			function onLoadTRanslationFile ( success:Boolean )	{		if ( success )		{			this.trace ( "IMPORTATION OF LANGUAGE DICTIONARY" ) ;						var term:String ;			for ( var i:String in lglv ) {				term = String(i).split("\r\n").join("").split("\n").join("").split("\r").join("") ;				translation.terms[term] = lglv[i] ;			}						this.translateUI () ;		} else {			this.trace ( "ERROR DURING IMPORTATION OF LANGUAGE DICTIONARY" ) ;		}						// FtpWebService object		ftpWebService=new FtpWebService ( this );		ftpWebService.onLoad=Delegate.create(this,onLoadFtpContent);		ftpWebService.itemFunction=Delegate.create(this,itemFunction);				ftpWebService.getFtpContent(initialRelativePath);						dgInit() ;	}			function translateUI (  )	{		this.help.upload.text = translation.getTranslation ( "UPLOAD_FILES" ) ;		this.help.download.text = translation.getTranslation ( "DOWNLOAD_FILE" ) ;		this.help.rename.text = translation.getTranslation ( "RENAME" ) ;		this.help.create_dir.text = translation.getTranslation ( "CREATE_DIR" ) ;		this.help.delete_item.text = translation.getTranslation ( "DELETE" ) ;		this.help.refresh.text = translation.getTranslation ( "REFRESH" ) ;		this.help.returnParent.text = translation.getTranslation ( "RETURN_TO_PARENT" ) ;				this.uploadStatus.upload_status.text = translation.getTranslation ( "UPLOAD_STATUS" ) ;		this.uploadStatus.files.text = translation.getTranslation ( "FILES" ) ;				this.wait.title.text = translation.getTranslation ( "PLEASE_WAIT" ) ;				itemTypeField = translation.getTranslation ( "TYPE" ) ;		itemIconField = translation.getTranslation ( "ICON" ) ;		itemNameField = translation.getTranslation ( "NAME" ) ;		itemSizeField = translation.getTranslation ( "SIZE" ) ;		itemModifField = translation.getTranslation ( "LAST_MODIFICATION" ) ;				itemName_mc.window.content.title.text = translation.getTranslation ( "ENTER_NAME" ) ;		itemName_mc.window.content._btn.label = translation.getTranslation ( "OK" ) ;		itemName_mc.window.content._cancel.label = translation.getTranslation ( "CANCEL" ) ;			}		function itemFunction(item:Object)	{		item[itemIconField]=item[itemTypeField]; // By default icon movie clip name = type				if (item[itemTypeField]=="file")		{			if (item[itemSizeField]>1000000)				item[itemSizeField]=Math.round(item[itemSizeField]/1000000)+"Mo";			else				item[itemSizeField]=Math.round(item[itemSizeField]/1000)+"Ko";		}		else		{			if (item[itemNameField]==".")				return null;			if (item[itemNameField]=="..")			{				// is it the top folder				if (ftpWebService.getRelativePath()=="")					return null;				// 				item[itemIconField]=backFolderMcName;			}		}		return item;	}	function dgInit()	{		listener=new Object;		listener.change=Delegate.create(this,dgChangeSelection);		_dg.addEventListener("change",listener);		_dg.iconField=itemIconField;//itemTypeField;						var col:DataGridColumn;				col = new DataGridColumn(itemTypeField);		adjustColumn(_dg.addColumn(col),itemTypeFieldSize);		col = new DataGridColumn(itemNameField);		adjustColumn(_dg.addColumn(col),itemNameFieldSize);		col = new DataGridColumn(itemSizeField);		adjustColumn(_dg.addColumn(col),itemSizeFieldSize);		col = new DataGridColumn(itemModifField);		adjustColumn(_dg.addColumn(col),itemModifFieldSize);				return;				// workaround for solid header		mx.controls.DataGrid.prototype.drawHeaderBG = function(Void) {			var mc:MovieClip = this.header_mc;			mc.clear();			var clr:Number = this.getStyle("headerColor");			var o:Object = this.__viewMetrics;			var tot:Number = Math.max(this.totalWidth, this.displayWidth+3);			mc.moveTo(o.left, o.top);			mc.beginFill(clr, 100);			mc.lineStyle(0, 0x000000, 0);			mc.lineTo(tot, o.top);			mc.lineTo(tot, this.__headerHeight+1);			mc.lineStyle(0, 0x000000, 0);			mc.lineTo(o.left, this.__headerHeight+1);			mc.lineStyle(0, 0x000000, 0);			mc.endFill();		};		var headerStyles = new CSSStyleDeclaration();				headerStyles.setStyle("fontFamily", "Verdana");		headerStyles.setStyle("fontSize", "10");		headerStyles.setStyle("fontWeight", "bold");		headerStyles.setStyle("textAlign", "center");				_dg.setStyle("headerStyle",headerStyles);		_dg.setStyle("headerColor","0x515151");		_dg.setStyle("borderStyle", "solid");		_dg.setStyle("borderColor", "0x000000");		_dg.setStyle("borderCapColor","0x000000");		_global.styles.DataGrid.setStyle("backgroundColor", "none");
//		_global.styles.ScrollSelectList.setStyle("backgroundColor", "undefined");
//		_dg.setStyle("backgroundColor","undefined");		_dg.setStyle("color","0xD2D2D2");		_dg.setStyle("fontStyle","Verdana");		_dg.setStyle("fontSize","9");				// selection		_dg.setStyle("rollOverColor","0xD2D2D2");		_dg.setStyle("selectionColor","0xDDDDDD");			}	function adjustColumn(col:Object,awidth:Number)	{		col.resizable=false;		if (awidth>0)			col.width=awidth;	}	// selection changed	function dgChangeSelection(ev) 	{		this.trace("FtpClient dgChangeSelection "+_dg.selectedItems.length+" - "+_dg.selectedItem[itemTypeField]);	}	// ftp content available	function onLoadFtpContent(success)	{		this.trace ( "onLoadFtpContent success = "+success+" - error = "+ftpWebService._lastError) ;		if ( ftpWebService.isOnRoot == true )		{			this.help.returnParent._visible = return_btn._visible = false ;		} else {			this.help.returnParent._visible = return_btn._visible = true ;
		}				_dg.dataProvider=ftpWebService._currentFtpContent;		// display error		if (ftpWebService._lastError!="")			displayError("Error",ftpWebService._lastError);		// cell renderer		_dg.getColumnAt(_dg.getColumnIndex(itemTypeField)).cellRenderer=iconeCellRendererName;		_dg.sortItemsBy(itemTypeField,"DESC");				// silex library refresh		_lc.send("_silexLibrary","refresh");	}	function doDownload()	{		if ( _dg.selectedItem[itemTypeField] != "folder" )		{			ftpWebService.downloadFile(_dg.selectedItem[itemNameField]);		} else {			displayError ( "DOWNLOAD_ERROR" , "CANNOT_DOWNLOAD_DIR" ) ;		}	}	function doDelete()	{		ftpWebService.deleteItem(_dg.selectedItem[itemNameField]);	}	function doRename()	{		if (!_dg.selectedItem[itemNameField])			return;					// itemName_mc		_root.resultName=_dg.selectedItem[itemNameField];		itemName_mc.window.title=translation.getTranslation("RENAME_ITEM");		itemName_mc._visible=true;		itemName_mc.window._visible=true;		itemName_mc.Done=Delegate.create(this,function()		{			ftpWebService.renameItem(_dg.selectedItem[itemNameField],_root.resultName);//,Delegate.create(this,renameDone));			itemName_mc._visible=false;		});		itemName_mc.Cancel=Delegate.create(this,function()		{			itemName_mc._visible=false;		});	}		function doRefresh()	{		ftpWebService.getFtpContent(".");	}	function doReturnToParent()	{		ftpWebService.getFtpContent("../");	}		function doCreate()	{		_root.resultName="New folder";		itemName_mc.window.title=translation.getTranslation("CREATE_FOLDER");		itemName_mc._visible=true;		itemName_mc.window._visible=true;		itemName_mc.Done=Delegate.create(this,function()		{			ftpWebService.createFolder(_root.resultName);			itemName_mc._visible=false;		});		itemName_mc.Cancel=Delegate.create(this,function()		{			itemName_mc._visible=false;		});	}			function doUpload()	{		ftpWebService.addUpload();	}		// ***********	// displayError	function displayError(caption_str:String,text_str:String, doRefreshList :Boolean)	{		this.trace( "displayError "+caption_str+" - "+text_str) ;		_global.errorWindowText=translation.getTranslation(text_str);			popup("errorWindowContent",caption_str,300,150);		if ( doRefreshList === true )		{			doRefresh();		}	}		function popup(contentPath_str:String,caption_str:String,thewidth:Number,theheight:Number):MovieClip	{		// init obj		var _obj:Object=new Object;				// size and position of the window		_obj._width=thewidth;		_obj._height=theheight;		_obj._x=(this._width/2)-(thewidth/2);		_obj._y=(this._height/2)-(theheight/2);		_obj.closeButton=true;		_obj.contentPath=contentPath_str;		_obj.title=caption_str;				// creation of the window		var my_win:MovieClip = PopUpManager.createPopUp(this, Window, true, _obj);		var winListener:Object = new Object();		winListener.click = function(){my_win.deletePopUp();_global.alertFormError_str="";};		my_win.addEventListener("click", winListener);				// returns the window		return my_win;	}	function trace(str)
	{
		_root.debug_str = str+"<br>"+_root.debug_str;
	}}